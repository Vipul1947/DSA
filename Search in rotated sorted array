class Solution {
public:
    int find_min(vector<int> &nums,int start,int end)
    {
        if(start<=end){
        int mid=start+(end-start)/2;
        if(nums[mid-1]>=nums[mid] && (mid+1==nums.size() || nums[mid+1]>=nums[mid]))
            return mid;
        else if(nums[start]==nums[mid])
            return mid+1;
        else if(nums[end]==nums[mid])
            return mid-1;
        else if(nums[start]>nums[mid])
            return find_min(nums,start,mid);
        else if(nums[mid]>nums[end])
            return find_min(nums,mid,end);
        
        }
        return -1;
    }
    int find_target(vector<int> &nums,int start,int end,int target)
    {
        if(start<=end)
        {
        int mid=start+(end-start)/2;
        if(nums[mid]==target)
            return mid;
        else if(nums[mid]>target)
            return find_target(nums,start,mid-1,target);
        else if(nums[mid]<target)
            return find_target(nums,mid+1,end,target);
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        if(nums[0]==target)
            return 0;
        else if(nums[nums.size()-1]==target)
            return nums.size()-1;
        if(nums.size()==2)
            return -1;
        int index_of_min=nums[0]<=nums[nums.size()-1]?0:find_min(nums,0,nums.size()-1);
        if(index_of_min<0)
            return -1;
        int x=find_target(nums,0,index_of_min-1,target);
        if(x!=-1)
            return x;
        return find_target(nums,index_of_min,nums.size()-1,target);
    }
};
